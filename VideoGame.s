//Rebecca Lawton

// Description of Game: Mario must try to bump into the brown
//and pink squares while avoiding the green and blue ones.

// 3 advanced features: gravity, complex scoring system, massive number of sprites

//How to play the game: use the pushbuttons to move Mario around the screen.
//The 0 pushbutton moves mario right, 1 moves him left, 2 moves him down, and 3
//moves him up. Try to have mario collide with the brown squares (+5 points)
//and the pink squares (+10 points). Try to avoid collisions between mario
//and the green (-15 points) or blue (automatic loss) sprites. Winning and losing
//messages are displayed on the screen when either occurs.

//YouTube link for demo: https://youtu.be/qexQJd-zLaM








//draws a string starting at specified (x,y) location. x stored in r0, y 
//stored in r1, address of string stored in r2
DrawStr:
//prologue
//store all callee save registers that are altered 
push {r6, r7, r8, r9, lr}
//calculate address in character buffer and store in r7
orr r6, r0, r1, lsl #7
mov r7, #0xc9000000
add r7, r7, r6
//load ASCII of first character of the string into r8
ldrb r8, [r2]
//begin while loop
b compare
DrawStrbody:
strb r8, [r7]
add r2, r2, #1
ldrb r8, [r2]
add r7, r7, #1

//while loop comparison
compare:
//if character is null, end function
cmp r8, #0
beq Epilogue
//if x position of character is larger than 79, end function
and r9, r7, #127
cmp r9, #80
bge Epilogue
//if y position of character is larger than 59, end function
lsr r9, r7, #7
and r9, r9, #63
cmp r9, #60
bge Epilogue
//if we made it here, we are in bounds of character buffer and have not
//gone through the entire string yet... continue looping
b DrawStrbody
//epilogue
//restore all of the calle-save registers
Epilogue:
pop {r6, r7, r8, r9, pc}
//end DrawStr


//another helper function that blanks the screen
//Given to us by Russ in Assignments 1 and 2
BlankScreen:
ldr r3, =PIX_BUFFER
mov r2, #0
mov r0, #0
BlankScreen_Loop:
mov r1, #0
BlankScreen_RowLoop:
str r2, [r3, r1]
add r1, r1, #4
cmp r1, #640
blo BlankScreen_RowLoop
add r3, r3, #1024
add r0, r0, #1
cmp r0, #240
blo BlankScreen_Loop
bx lr
//end BlankScreen


//Function ClearTextBuffer takes in no parameters and returns no outputs
// Clears the text buffer by filling it with spaces (ASCII 0x20)
ClearTextBuffer:
//prologue. Save all the callee-save registers
push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
//this is the lowest possible address of the text buffer, 0xc9000000
ldr r0, =3372220416
//this is the difference between the largest and smallest addresses of the 
//text buffer, 0xc9000000 (0,0) and 0xc9001dcf (79, 59)
ldr r2, =7632
//r1 will be the loop index variable
mov r1, #0
//ASCII for space is 32
mov r3, #32
//it's a for loop, so unconditional branch to conditions
b conditions
//body of function
restClear:
//r4 is potential new address of text buffer
add r4, r0, r1
//next 10 lines test whether r4 is actually a valid address
//isolate lower 7 bits of address (x value)
and r5, r4, #127
//if x value is larger than 79, don't store anything
cmp r5, #80
bge increment
//if x value is less than 0, don't store anything
cmp r5, #0
blt increment
//isolate bits <7,11> of address (y value)
lsr r4, r4, #7
and r5, r4, #63
//if y value is less than 0, don't store anything
cmp r5, #0
blt increment
//if y value is larger than 59, don't store anything
cmp r5, #60
bge increment
//otherwise, r4 is a valid text buffer address: clear it
strb r3, [r0, r1]
//increment for loop index
increment:
add r1, r1, #1
//condition check... do we repeat the for loop?
conditions:
//repeat 7632 times, once for each address between the max and min
//addresses of text buffer
cmp r1, r2
bne restClear
rest:
//epilogue. Restore callee-save registers
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//End ClearTextBuffer


//ClearVGA takes an unsigned integer halfword representing a color as input
//returns no output
//clears the video buffer by filling it with the given color value
//USES DOUBLE BUFFERING
ClearVGA:
//PROLOGUE
push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
//load the starting address of the back buffer out of the Backbuffer register
ldr r3, =0xFF203024
ldr r4, [r3]
//load the starting address of the front buffer out the Buffer register
ldr r5, =0xFF203020
ldr r6, [r5]
cmp r4, r6
//if front and back buffers are equal, the back buffer has yet to be set up
//if they differ, back buffer has already been set up- begin algorithm
bne begin
//if we make it here, need to set up back buffer- move the chosen address
//for the back buffer, #0x08000000, into the Backbuffer register
mov r4, #0x08000000
str r4, [r3]
begin: 
//r1 will be our index variable for our loop
mov r1, #0
//r2 is the number we're counting up to- the difference between the highest
//and lowest values of a pixel buffer (for both front and back buffers)
ldr r2, =245374
//we're gonna use a while loop to do this, so need unconditional branch to conditions
b conditionsVGA
//for loop body
restVGA:
//isolate bits <1,9> of potential pixel buffer address (x value)
ldr r6, =511
add r7, r4, r1
and r3, r6, r7, lsr #1
//if x value of address is larger than 319 (off the screen), store nothing
cmp r3, #320
bge incrementVGA
//if x value of address is smaller than 0 (off the screen), store nothing
cmp r3, #0
blt incrementVGA
//isolate bits <18,10> of potential pixel buffer address (y value)
lsr r3, r7, #10
and r3, r3, #255
//if y is larger than 239 (off the screen), store nothing
cmp r3, #240
bge incrementVGA
//if y is less than 0 (off the screen), store nothing
cmp r3, #0
blt incrementVGA
//if we made it here, the address is on the screen... store the color value
strh r0, [r7]
//increment while loop index
incrementVGA:
add r1, r1, #2
//while loop conditions. Check that address is still between lowest
//and highest addresses
conditionsVGA:
cmp r1, r2
bne restVGA

//store a "1" in the front buffer to switch front and back buffers
ldr r0, =0xFF203020
mov r1, #1
str r1, [r0]
//poll status register to see if buffer switch has completed. Don't return
//to place where function was called until switch is done
loadStatusBit:
ldr r3, =0xFF20302C
ldr r4, [r3]
and r4, r4, #1
cmp r4, #0
bne loadStatusBit
//EPILOGUE
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//end ClearVGA


//BitBlit takes 3 inputs: pointer to pixmap, and x&y values for center of graphic
//returns no outputs
//transfers pixel data stored in pixmap data structure into memory addresses
//mapped to pixels. Draws a color image on the screen and clips accordingly
BitBlit:
//prologue
push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
//load pixmap width from memory
ldrh r3, [r0, #PIXMAP_WIDTH]
//load pixmap height from memory
ldrh r4, [r0, #PIXMAP_HEIGHT]
//use width and center of pixmap to find its minimum x-value
sub r5, r1, r3, lsr #1
ldr r11, =xmin
strh r5, [r11]
//calculate the xmax value (center x value + 1/2 width)
add r6, r1, r3, lsr #1
//calculate the ymin value (center y value - 1/2 width)
sub r7, r2, r4, lsr #1
//calculate the ymax value (center y value + 1/2 width)
add r8, r2, r4, lsr #1
//set loop index to 0
mov r9, #0
//load transparency field of structure
//specifies a special color value which indicates which portions of the
//image are to be treated as transparent
ldrh r3, [r0, #PIXMAP_TRANSPARENCY]
//branch to outer for loop conditions
b outerConditions
//outer loop body begins here
outerLoop:
//load xmin value into r5 (we're on a new row, need to cycle through all the columns
//and store their corresponding bits). x values are cycled through in inner loop
//because pixmap color values are stored in row major order
ldrh r5, [r11]
//branch to inner for loop conditions
b innerConditions
innerLoop:
//use loop index and constant defined above to index into proper
//color value of pixmap structure. Load color into r1
add r10, r0, #PIXMAP_PIXELDATA
add r10, r10, r9, lsl #1
ldrh r1, [r10]
//calculate next address in pixel buffer we're writing to 
add r2, r5, r7, lsl #9
lsl r2, #1
add r2, #PIX_BUFFER
//check color value to see if it's equal to transparency field
cmp r1, r3
//if color is equal to transparency field, don't write anything to calculated
//memory address
beq incrementX
//check address is not off the screen
//if x is less than 0, don't transfer color value
cmp r5, #0
blt incrementX
//if x is larger than 319, don't transfer color value
ldr r10, =319
cmp r5, r10
bgt incrementX
//if y is less than 0, don't transfer color value
cmp r7, #0
blt incrementX
//if y is larger than 239, don't transfer color value AND jump to the end
//of the function because y only increments in this algorithm... no subsequent
//addresses will be valid. This is in contrast to the x value, which decreases
//back to its original value with every iteration of the outer loop (which is
//why the function is not over when the x value gets too large)
cmp r7, #239
bgt spriteepilogue
//if we made it here, we should store the color value in the pixel buffer address
strh r1, [r2]
//inner loop increment. Add 1 to x value and loop index, which helps us
//index into pixmap to get correct color value
incrementX:
add r5, r5, #1
add r9, r9, #1
//inner for loop conditions. x value goes from xmin to xmax for every
//value of y (every iteration of outer loop)
innerConditions:
cmp r5, r6
blt innerLoop
incrementY:
//outer loop increment. Add 1 to the y value. y values correspond to outer loop
//because color values for pixmap are stored in row major order
add r7, r7, #1
outerConditions:
//outer for loop conditions. y value counts from ymin to ymax
cmp r7, r8
blt outerLoop
spriteepilogue:
//epiogue
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//end BitBlit

//function init sets up initial video game scene by clearing screen and drawing
//all sprites in the correct locations
//takes no inputs and returns no outputs
init:
//prologue
push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
//clear screen/make it black
ldr r0, =0x0000
bl ClearVGA
//set score variable to 0
ldr r0, =keep_score
mov r1, #0
str r1, [r0]
//r5 will be loop index as we cycle through all the sprites
mov r5, #0
//r4 will be pointer to sprite struct
ldr r4, =mario_struct
//start for loop with an unconditional branch to the conditions
b initcompare
//body of for loop begins here
initbody:
//call BitBlit to draw sprite on screen
ldr r0, [r4, #SPRITE_PTR]
ldr r1, [r4, #SPRITE_XPOS]
ldr r2, [r4, #SPRITE_YPOS]
bl BitBlit

add r4, r4, #20
//update loop index
add r5, r5, #1

//if we haven't drawn all the sprites yet, keep going
initcompare:
cmp r5, #33
blt initbody

//epilogue
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//end init

//function updateXPos takes in 1 argument, the struct's start address, in r0
//and updates its position based on its velocity
updateXPos:
//prologue
push {r5, r11, lr}
//load sprite x-position and x-velocity from memory struct
ldr r3, [r0, #SPRITE_XPOS]
ldr r11, [r0, #SPRITE_XVEL]
//add velocity to position to update position
add r3, r11, r3

//if new position is less than 0, set it to 0 and reverse the x velocity
cmp r3, #0
bge compare1
mov r5, #0
str r5, [r0, #SPRITE_XPOS]
rsb r11, r11, #0
str r11, [r0, #SPRITE_XVEL]
b popUpdateXPos
compare1:
//if new position is greater than 319, set it to 319 and reverse the x velocity
cmp r3, #320
blt setxpos
ldr r5, =319
str r5, [r0, #SPRITE_XPOS]
rsb r11, r11, #0
str r11, [r0, #SPRITE_XVEL]
b popUpdateXPos

//set struct's new position if it is not out of bounds of the pixel buffer
setxpos:
str r3, [r0, #SPRITE_XPOS]

popUpdateXPos:
//epilogue
pop {r5, r11, pc}
//end updateXPos

//function updateXPos takes in 1 argument, the struct's start address, in r0
//and updates its position based on its velocity
updateYPos:
//prologue
push {r4, r5, r10, lr}
//load sprite y-position and y-velocity from memory struct
ldr r4, [r0, #SPRITE_YPOS]
ldr r10, [r0, #SPRITE_YVEL]
//add velocity to position to update position
add r4, r4, r10

//if new position is less than 0, set it to 0 and reverse the y velocity
cmp r4, #0
bge compare2
mov r5, #0
str r5, [r0, #SPRITE_YPOS]
rsb r10, r10, #0
str r10, [r0, #SPRITE_YVEL]
b popUpdateYPos
compare2:
//if new position is greater than 239, set it to 239 and reverse the y velocity
cmp r4, #240
blt setypos
mov r5, #239
str r5, [r0, #SPRITE_YPOS]
rsb r10, r10, #0
str r10, [r0, #SPRITE_YVEL]
b popUpdateYPos

//set struct's new position if it is not out of bounds of the pixel buffer
setypos:
str r4, [r0, #SPRITE_YPOS]

popUpdateYPos:
//epilogue
pop {r4, r5, r10, pc}
//end updateYPos

//Function marioButtons checks for user input via the pushbuttons and
//changes mario's behavior accordingly
marioButtons:
//prologue
push {r4, r5, r6, r7, r8, lr}
//load status information from the pushbuttons into r4
ldr r4, =BUTTONS
ldr r4, [r4]
//only the lower 4 bits of the address hold useful status information
and r4, r4, #0x0f

mov r5, #5
mov r6, #-5
ldr r7, =mario_struct
mov r8, #0

//if none of the pushbuttons are pressed, Mario doesn't move
//x and y velocity are stored as 0
cmp r4, #0
streq r8, [r7, #SPRITE_XVEL]
streq r8, [r7, #SPRITE_YVEL]

//if the rightmost pushbutton is pressed, Mario begins moving right
cmp r4, #1
streq r5, [r7, #SPRITE_XVEL]
streq r8, [r7, #SPRITE_YVEL]

//if the secondmost pushbutton from the right is pressed, Mario begins moving
//left
cmp r4, #2
streq r6, [r7, #SPRITE_XVEL]
streq r8, [r7, #SPRITE_YVEL]

//if the secondmost pushbutton from the left is pressed, Mario begins moving down
cmp r4, #4
streq r8, [r7, #SPRITE_XVEL]
streq r5, [r7, #SPRITE_YVEL]

//if the leftmost pushbutton is pressed, Mario begins moving up
cmp r4, #8
streq r8, [r7, #SPRITE_XVEL]
streq r6, [r7, #SPRITE_YVEL]

//epilogue
pop {r4, r5, r6, r7, r8, pc}
//end marioButtons function

//SPECIAL FEATURE #1
//add "reverse gravity" to make the sprites accelerate towards the top of the screen
//takes 1 input in r0, the sprite's struct address
antiGravity:
ldr r1, [r0, #SPRITE_YVEL]
//subtract 1 from the sprite's velocity
add r1, r1, #-1
str r1, [r0, #SPRITE_YVEL]
bx lr
//end antiGravity function

//function update continuously updates the state of the sprite structs
//using information such as current position, velocity, and the gravity
//special feature
update:
//prologue
push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

//for loop... goes through all the sprites individually and updates their state
mov r4, #0
mov r5, #20
b updateCompare

//body of function
updateBody:
//calculate address of sprite's struct in memory
ldr r0, =mario_struct
mla r0, r4, r5, r0
//update sprite's x position
bl updateXPos
//need to re-load address of sprite's memory struct into r0
//because it's a call-clobbered register
ldr r0, =mario_struct
mla r0, r4, r5, r0
//update sprite's y position
bl updateYPos

//as long as sprite is not at the top of the screen, accelerate it
//upwards towards the top of the screen using reverse gravity special feature
cmp r4, #0
beq updateIncrement
ldr r0, =mario_struct
mla r0, r4, r5, r0
bl antiGravity

//for loop increment
updateIncrement:
add r4, r4, #1

//if we're not done going through all 33 sprites yet, keep looping
updateCompare:
cmp r4, #33
blt updateBody

//respond to user input via the pushbuttons
bl marioButtons

popInst:
//epilogue
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//end update

//the draw function draws the sprites at their correct locations
//once their structs have been updated by the update function
draw:
//prologue
push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

//begin for loop that goes through all sprites
//r4 will be the loop index variable
mov r4, #0
mov r5, #20
b drawCompare

//for loop body
drawBody:
//calculate address of sprite's struct in memory
ldr r0, =mario_struct
mla r0, r4, r5, r0
ldr r1, [r0, #SPRITE_XPOS]
ldr r2, [r0, #SPRITE_YPOS]
ldr r0, [r0]
//call BitBlit to draw sprite
bl BitBlit
//update loop index
add r4, r4, #1

//if we haven't drawn all of the sprites yet, keep looping
drawCompare:
cmp r4, #33
blt drawBody

//epilogue
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//end draw function

//SPECIAL FEATURE: complex scoring system
//score function detects collisions between mario and the other sprites
//and adjusts score accordingly. Colliding with brown box adds 5 points to score,
//colliding with pink box adds 10 points to score, colliding with green box
//subtracts 15 points from score, and colliding with blue box ends the game
//right away
score:
//epilogue
push {r4, r5 ,r6, r7, r8, r9, r10, r11, lr}
ldr r0, =mario_struct
ldr r1, [r0, #SPRITE_XPOS]
ldr r2, [r0, #SPRITE_YPOS]
ldr r0, [r0]
//store 1/2 of mario's height and width in r4 and r5, respectively
//this will be used to detect collisions
ldrh r4, [r0, #PIXMAP_HEIGHT]
ldrh r5, [r0, #PIXMAP_WIDTH]
lsr r4, r4, #1
lsr r5, r5, #1

//r11 will be for loop index as we check for collisions with each
//colorful box sprite
mov r11, #0
mov r10, #20
//branch to for loop conditions
b scoreCompare

//function body begins here
scoreBody:
//calculate address of sprite's struct
ldr r0, =brown_struct
mla r0, r10, r11, r0
//load sprite's x and y locations into registers
ldr r6, [r0, #SPRITE_XPOS]
ldr r7, [r0, #SPRITE_YPOS]

//compare mario's x location to colorful sprite's x location
subs r3, r1, r6
rsbmi r3, r3, #0
//if distance between mario's x location and sprite's x location is
//less than or = to mario's width, there may be a collision. Compare y locations
//to be sure, otherwise, move on to checking for collisions between mario
//and all other sprites
cmp r3, r5
//if no collision, increment loop index and jump to comparison
addgt r11, r11, #1
bgt scoreCompare
//compare mario's y location to colorful sprite's y location
subs r8, r2, r7
rsbmi r8, r8, #0
//if distance between mario's y location and sprite's y location is
//less than or = to mario's height, there is a collision
cmp r8, r4
//if no collision, increment loop index and jump to comparison
addgt r11, r11, #1
bgt scoreCompare

//if we made it here, there was a collision
ldr r0, =brown_struct
mla r0, r11, r10, r0
ldr r3, [r0, #SPRITE_PTR]
ldr r6, =transparent_pixmap
//turn colorful sprite into a transparent sprite... it disappears
str r6, [r0, #SPRITE_PTR]

//load cururent score into r7
ldr r8, =keep_score
ldr r7, [r8]

//if collision was with brown_pixmap, 5 points is added to score
ldr r6, =brown_pixmap
cmp r3, r6
addeq r7, r7, #5

//if collision was with pink_pixmap, 10 points is added to score
ldr r6, =pink_pixmap
cmp r3, r6
addeq r7, r7, #10

//if collision was with green pixmap, 15 points is subtracted from score
ldr r6, =green_pixmap
cmp r3, r6
subeq r7, r7, #15
 
//store new score in memory
ldr r6, =keep_score
str r7, [r6]

//if collision was with blue pixmap, game is over
ldr r6, =blue_pixmap
cmp r3, r6
bleq gameOver1

//increment loop index in case of collision
add r11, r11, #1

//for loop conditions. If we haven't checked for collisions between mario
//and all of the colorful sprites, keep looping
scoreCompare:
cmp r11, #32
blt scoreBody

//epilogue
pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
//end score

//gameOver1 function is called when mario runs into the blue box, the first
//way to lose the game
gameOver1:
//clears screen
mov r0, #0
bl ClearVGA
//displays losing message
ldr r2, =YouLost1
mov r0, #3
mov r1, #20
bl DrawStr

//infinite loop
b gameOver1

//gameOver2 function is called when score becomes negative, the second
//way to lose the game
gameOver2:
//clears screen
mov r0, #0
bl ClearVGA
//displays losing message
ldr r2, =YouLost2
mov r0, #3
mov r1, #20
bl DrawStr

ldr r2, =YouLost3
mov r0, #3
mov r1, #25
bl DrawStr

ldr r2, =YouLost4
mov r0, #3
mov r1, #30
bl DrawStr

//infinite loop
b gameOver2

//gameWon is called when the player wins the game by accumulating at least 50
//points
gameWon:
//clear the screen
mov r0, #0
bl ClearVGA
//display winning message
ldr r2, =YouWon
mov r0, #3
mov r1, #20
bl DrawStr
//infinite loop
b gameWon

//checkStatus function checks score to see if user has won or lost
//to win the game, player must accumulate 50 or more points
//to lose the game, player's score must become negative
checkStatus:
//prologue
push {r4, lr}
//load score from memory
ldr r4, =keep_score
ldr r4, [r4]
//if score is less than 0
cmp r4, #0
//you lose
bllt gameOver2
//if score is >= 50
cmp r4, #50
//you win
blge gameWon
//epilogue
pop {r4, pc}
//end checkStatus

// These are addresses used frequently, so useful to descriptively name
.EQU PIX_BUFFER, 0xc8000000
.EQU TEXT_BUFFER, 0xc9000000
.EQU BUTTONS, 0xff200050



// These are some useful defines that will help you access structure fields
.EQU PIXMAP_WIDTH, 0
.EQU PIXMAP_HEIGHT, 2
.EQU PIXMAP_TRANSPARENCY, 4
.EQU PIXMAP_PIXELDATA, 6

.EQU SPRITE_PTR, 0
.EQU SPRITE_XPOS, 4
.EQU SPRITE_YPOS, 8
.EQU SPRITE_XVEL, 12
.EQU SPRITE_YVEL, 16


//this is where the code execution will begin
.global _start
_start:

// Inital stack
mov sp, #0x800000
//initialize game state by calling init before infinite loop begins
bl init

//start of infinite loop
inf_loop:
//clear the screen
mov r0, #0
bl ClearVGA
//clear the text buffer
bl ClearTextBuffer

//update sprite state
bl update
//draw updated sprites
bl draw
//score the game
bl score
//check for wins or losses
bl checkStatus

//branch to the top of the infinite loop
b inf_loop


.data 

//these strings are displayed inside the winning and losing functions
//to notify the user if they have won or lost
YouLost1:
.string "You bumped into the blue square! That means you lost. Better luck next time!"
YouLost2:
.string "Your score became negative! That means you lost. Better luck next time!"
YouLost3:
.string "Reminder: You win by avoiding the green and blue boxes while pursuing the" 
YouLost4:
.string "brown and pink ones"
YouWon:
.string "Congratulations! You have accumulated at least 50 points and have won!!"


//this location in memory is used to store the user's game score
.align 2
keep_score:
.word 0

//this is the array of sprite structs
//each entry in the array is 5 words long and stores the sprite's
//pixmap address, x location, y location, x velocity, and y velocity
//SPECIAL FEATURE: massive amount of active sprites
.align 2
mario_struct:
.word mario_pixmap, 160, 150, 0, 0
brown_struct:
.word brown_pixmap, 10, 0, 0, 4
.word brown_pixmap, 20, 0, 0, 10
.word brown_pixmap, 30, 0, 0, 18
.word brown_pixmap, 240, 0, 0, 16
.word brown_pixmap, 50, 0, 0, 12
.word brown_pixmap, 60, 0, 0, 2
.word brown_pixmap, 310, 0, 0, 7
.word brown_pixmap, 80, 0, 0, 5
.word brown_pixmap, 270, 0, 0, 4
.word brown_pixmap, 100, 0, 0, 8
.word brown_pixmap, 210, 0, 0, 14
.word brown_pixmap, 120, 0, 0, 10
.word brown_pixmap, 130, 0, 0, 20
.word brown_pixmap, 140, 0, 0, 7
.word brown_pixmap, 300, 0, 0, 15
.word blue_pixmap, 160, 0, 0, 17
.word brown_pixmap, 170, 0, 0, 1
.word brown_pixmap, 180, 0, 0, 14
.word brown_pixmap, 190, 0, 0, 20
.word brown_pixmap, 200, 0, 0, 19
pink_struct:
.word pink_pixmap, 110, 0, 0, 4
.word pink_pixmap, 220, 0, 0, 18
.word pink_pixmap, 230, 0, 0, 20
.word pink_pixmap, 40, 0, 0, 2
.word pink_pixmap, 250, 0, 0, 9
.word pink_pixmap, 260, 0, 0, 2
green_struct:
.word green_pixmap, 90, 0, 0, 3
.word green_pixmap, 280, 0, 0, 14
.word green_pixmap, 290, 0, 0, 13
.word green_pixmap, 150, 0, 0, 16
.word green_pixmap, 70, 0, 0, 17
blue_struct:
.word brown_pixmap, 319, 0, 0, 16

.align 2
// This should draw a small brown rectangle (transparent in the middle)
brown_pixmap:
.hword 8, 8, 0xfffe
.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4

// This should draw a small blue rectangle (transparent in the middle)
blue_pixmap:
.hword 8, 8, 0xfffe
.hword 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f
.hword 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f, 0x053f

// This should draw a small green rectangle (transparent in the middle)
green_pixmap:
.hword 8, 8, 0xfffe
.hword 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed
.hword 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed, 0x3fed

// This should draw a small pink rectangle (transparent in the middle)
pink_pixmap:
.hword 8, 8, 0xfffe
.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f

//this draws a transparent pixmap. Not visible on screen
transparent_pixmap:
.hword 8, 8, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe
.hword 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe


//address for xmin
xmin: .string "."

//mario pixmap starts here
mario_pixmap:
	.hword 64, 32, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7de, 0xf7ff, 0xf7ff, 0xf7ff, 0xf7ff, 0xf7ff
        .hword 0xf7ff, 0xf7ff, 0xf7ff, 0xf7de, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0xc40f, 0xbb8d
        .hword 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xc410, 0xef7d, 0xf7be
        .hword 0xf7be, 0xef7c, 0xd615, 0xd5f4, 0xd5f4, 0xd614, 0xd5f4, 0xde36, 0xef9d, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7de, 0xef5d, 0xa165, 0x9082, 0x98a2, 0x98a2, 0x90a3, 0x90c3, 0x90c3, 0x90c3
        .hword 0x90a2, 0x9986, 0xef5c, 0xf7de, 0xf7de, 0xef3b, 0xc4ee, 0xc4cd, 0xc4cd, 0xc4cd
        .hword 0xc4cd, 0xcd50, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0xbb4d, 0xaa89, 0x9924, 0x98e3, 0x98e3, 0x98e4
        .hword 0x98e3, 0x98e4, 0x98e4, 0x9904, 0x9904, 0x9924, 0xaa8a, 0xb2aa, 0xaaaa, 0xaa89
        .hword 0xa206, 0xa247, 0xc4ce, 0xc4ee, 0xc4ee, 0xcd50, 0xef9d, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef5c, 0xa186, 0x9082
        .hword 0x90e3, 0x90e3, 0x90e3, 0x90e3, 0x9904, 0x9904, 0x9924, 0x9924, 0x9104, 0x9104
        .hword 0x90e3, 0x90e3, 0x90c3, 0x90e3, 0x98e3, 0x9965, 0xbc8d, 0xc4ce, 0xbcad, 0xcd30
        .hword 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7de, 0xef7d, 0x69c6, 0x50c2, 0x5903, 0x5903, 0x50e3, 0x5924, 0xb40c, 0xbc6d
        .hword 0xbc6d, 0xb40c, 0x4165, 0x4185, 0xb42c, 0xc48e, 0xde38, 0xcd55, 0x9904, 0x9904
        .hword 0x9985, 0x9985, 0x9965, 0xaa89, 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xdefb, 0xd699, 0x6a27, 0x5964, 0x5103, 0x5103
        .hword 0x5964, 0x61c5, 0xbcad, 0xc50e, 0xc50e, 0xb4ad, 0x2965, 0x3185, 0xbcad, 0xcd50
        .hword 0xef7c, 0xde99, 0x9985, 0x9944, 0x98e4, 0x98e3, 0x90c3, 0xa207, 0xef7d, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0x6a07, 0x5964
        .hword 0xb46d, 0xbcad, 0x5964, 0x5123, 0xb46d, 0xc4ee, 0xc4ee, 0xc4ee, 0xc4ee, 0xb48d
        .hword 0x2965, 0x3165, 0xbccd, 0xc50e, 0xc50f, 0xc4ee, 0xbcad, 0xb42c, 0x9104, 0x90e3
        .hword 0x90c3, 0xa208, 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xef7c, 0x61c6, 0x5102, 0xb48d, 0xc4ce, 0x5964, 0x5123, 0x9baa, 0xac0c
        .hword 0xbccd, 0xc4ee, 0xc4ee, 0xbcad, 0x5247, 0x5247, 0x9beb, 0xa40c, 0xbccd, 0xc4cd
        .hword 0xc4ee, 0xbc6d, 0x9a06, 0x99a5, 0x90e3, 0xa208, 0xef7d, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0x61c6, 0x5102, 0xbc8d, 0xc4ce
        .hword 0x5943, 0x48c2, 0x48c2, 0x5103, 0xb46d, 0xc4ee, 0xc4ce, 0xc4ce, 0xcd0e, 0xb48d
        .hword 0x2945, 0x3185, 0xbcad, 0xc4ee, 0xc4ee, 0xc4ee, 0xc50e, 0xb46d, 0x90a2, 0xa1c7
        .hword 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d
        .hword 0x61c6, 0x48e2, 0x8b29, 0x9369, 0x7a87, 0x7a67, 0x7a67, 0x7aa7, 0xbc8d, 0xc4ce
        .hword 0xc4ce, 0xbcad, 0x8b8a, 0x7b29, 0x2944, 0x2965, 0x834a, 0x836a, 0x836a, 0x8b6a
        .hword 0xab4a, 0xab4a, 0xb32c, 0xbc0f, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0x59a5, 0x4081, 0x4081, 0x48c2, 0xb48d, 0xc50e
        .hword 0xc4ee, 0xc4ee, 0xbccd, 0xbccd, 0xc4ce, 0xb46d, 0x2124, 0x18c3, 0x1904, 0x1904
        .hword 0x18e3, 0x18e4, 0x1904, 0x2904, 0x88a2, 0xa1c7, 0xf7be, 0xf7ff, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xb554, 0xacd2
        .hword 0xacf2, 0xacf2, 0xbcce, 0xbccd, 0xbccd, 0xbccd, 0xbccd, 0xbcce, 0xbcce, 0xb4ad
        .hword 0x7b4a, 0x7b29, 0x7b29, 0x7b29, 0x7b29, 0x72e9, 0x6124, 0x68e3, 0x88a3, 0xa1c7
        .hword 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7de, 0xf7ff, 0xffff, 0xffff, 0xf7de, 0xc530, 0xbccd, 0xc4cd, 0xbccd
        .hword 0xbcce, 0xbcce, 0xbcce, 0xbcce, 0xc4ee, 0xc4ee, 0xc4ed, 0xc4ee, 0xc4ee, 0xbc6d
        .hword 0x9924, 0x90c3, 0x88a2, 0x99c7, 0xef7d, 0xf7de, 0xf7de, 0xf7de, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xbb4d, 0xaa89, 0xaaaa, 0xaaaa, 0xaaaa, 0xaa8a
        .hword 0xa206, 0x91e7, 0x5a91, 0x5a91, 0x99e7, 0x99e6, 0x99e6, 0x99e6, 0x99e6, 0x91e7
        .hword 0x5291, 0x5a90, 0x99e6, 0x99c5, 0x88c3, 0x9165, 0xd5b6, 0xde38, 0xf7de, 0xce58
        .hword 0x7aca, 0x93ce, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xef9d, 0xf79d, 0xef5c, 0xa1a6, 0x8861
        .hword 0x9082, 0x9082, 0x9082, 0x8882, 0x90a2, 0x80c4, 0x31b2, 0x31b2, 0x88c4, 0x88a3
        .hword 0x88a3, 0x88a3, 0x88a2, 0x80c4, 0x31b2, 0x31b1, 0x80c4, 0x88c3, 0x88c3, 0x99e7
        .hword 0xef9d, 0xf7de, 0xf7bd, 0xb575, 0x4061, 0x61e6, 0xef9d, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xcdb2, 0xc52f
        .hword 0xc530, 0xc50f, 0x9965, 0x90a2, 0x90c3, 0x90c3, 0x90c3, 0x90c3, 0x90c3, 0x90c3
        .hword 0x80e5, 0x7906, 0x41af, 0x41af, 0x88c4, 0x90c2, 0x90c3, 0x88c3, 0x80e5, 0x7907
        .hword 0x396f, 0x5251, 0xde79, 0xe6da, 0xfffe, 0xce37, 0x61e6, 0x5985, 0x40c2, 0x6a27
        .hword 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xef9d, 0xc530, 0xbcad, 0xbcad, 0xbc8d, 0x99a5, 0x9104, 0x90e3, 0x90c3
        .hword 0x90c3, 0x90c3, 0x90c3, 0x90c3, 0x90c2, 0x88c4, 0x31d2, 0x31d2, 0x78e6, 0x80e4
        .hword 0x80e4, 0x80e4, 0x88e4, 0x7905, 0x3a10, 0x4ad3, 0xd6bc, 0xd6fd, 0xdefd, 0xad35
        .hword 0x40a2, 0x48c2, 0x40c2, 0x6a27, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xc530, 0xbc8d, 0xbcad, 0xbcad
        .hword 0xb46c, 0xb42c, 0x9103, 0x8882, 0x90a2, 0x90c2, 0x90c2, 0x90c2, 0x90c2, 0x88c4
        .hword 0x31b1, 0x29d3, 0x31b2, 0x31b2, 0x31b1, 0x31b1, 0x31b1, 0x4230, 0xad24, 0xa4e5
        .hword 0x3a32, 0x31f3, 0x3213, 0x31d0, 0x48e3, 0x48e2, 0x40c2, 0x6a27, 0xef9d, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d
        .hword 0xd5d4, 0xc571, 0xbcce, 0xb48d, 0xc530, 0xc551, 0xaaeb, 0xa269, 0x7927, 0x7107
        .hword 0x7106, 0x7906, 0x78e6, 0x7107, 0x31b1, 0x31f2, 0x4aaf, 0x4aaf, 0x31f2, 0x29d2
        .hword 0x29d3, 0x3a31, 0x9467, 0x8c28, 0x31d1, 0x29b2, 0x29d2, 0x31b0, 0x48e3, 0x48e2
        .hword 0x40a2, 0x6a27, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf79d, 0xbd0f, 0xac4b, 0xde98, 0xffff
        .hword 0xffff, 0xf7df, 0x4ab4, 0x29b2, 0x29d3, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x3a11
        .hword 0xb544, 0xb543, 0x3a31, 0x29b2, 0x29d2, 0x29d2, 0x29b2, 0x29d2, 0x29d2, 0x29d2
        .hword 0x29d2, 0x31b0, 0x40e3, 0x40e2, 0x40a2, 0x6227, 0xef9d, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d
        .hword 0xd615, 0xc572, 0xa470, 0xa491, 0xa4b1, 0x9c91, 0x3a32, 0x29d2, 0x29d2, 0x29d2
        .hword 0x29d2, 0x29d2, 0x29d2, 0x31f2, 0x7bca, 0x7bc9, 0x31f1, 0x29b2, 0x29d2, 0x29d2
        .hword 0x29b2, 0x29b2, 0x29d2, 0x29d2, 0x29d2, 0x31b0, 0x40e3, 0x40c2, 0x40a2, 0x6227
        .hword 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7ff, 0xf7df, 0x61e6, 0x4060, 0x40a1, 0x40a2
        .hword 0x31b0, 0x29d3, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x29b2, 0x29b2
        .hword 0x29d2, 0x29b2, 0x2191, 0x2191, 0x2171, 0x2171, 0x2191, 0x2191, 0x2191, 0x294f
        .hword 0x4082, 0x4081, 0x3860, 0x61e6, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0x9c2f, 0x7b2b
        .hword 0x5144, 0x48c2, 0x48e2, 0x48e3, 0x31b0, 0x29d3, 0x29d2, 0x29d2, 0x29d2, 0x29d2
        .hword 0x29d2, 0x29b2, 0x29b2, 0x29b2, 0x29b2, 0x3a12, 0x94d8, 0x9d18, 0x9d18, 0x9d18
        .hword 0x9d18, 0x9d18, 0x9d18, 0x9d17, 0xa4b2, 0xa4b1, 0xa4b1, 0xb554, 0xef9d, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xef9d, 0x61e6, 0x3861, 0x40c2, 0x48e2, 0x40c2, 0x40c2, 0x2990, 0x29b2
        .hword 0x29b2, 0x29b2, 0x29b2, 0x29b1, 0x29b1, 0x29b1, 0x29b1, 0x29b1, 0x2191, 0x4253
        .hword 0xef9d, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xf7ff, 0xf7ff
        .hword 0xf7ff, 0xf7de, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0x6207, 0x40a1, 0x40c2, 0x40c2
        .hword 0xa4b2, 0xce17, 0xbe1a, 0xbe1b, 0xbe1a, 0xbe1a, 0xbe1a, 0xbe1a, 0xbe1a, 0xbe1a
        .hword 0xbe1a, 0xbe1a, 0xbe1a, 0xc65b, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d
        .hword 0x6a48, 0x4903, 0x4924, 0x4924, 0xce58, 0xffff, 0xf7de, 0xf7de, 0xf7de, 0xf7de
        .hword 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xdefa, 0xdeba, 0xdeba, 0xdeba, 0xef7d, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7de
        .hword 0xf7de, 0xf7de, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
        .hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be



